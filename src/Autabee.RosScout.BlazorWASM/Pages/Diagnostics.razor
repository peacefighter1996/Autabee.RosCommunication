@page "/diagnostics"
@using System.Text
@using Autabee.Communication.RosClient
@using Autabee.Communication.RosClient.Dto
@using Autabee.RosScout.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using RosSharp.RosBridgeClient
@using std_msgs = RosSharp.RosBridgeClient.MessageTypes.Std
@using System.Xml.Serialization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Diagnostics> Logger


<PageTitle>Ros Scout Diagnostics</PageTitle>
<div id="diagnostics-container">
    <div id="selected-master">
        <MudSelect @bind-Value="activeProfile" Margin="Margin.Dense" T="string" Label="SelectedProfile" Variant="Variant.Text">
            @if (rosSettings == null)
            {
                <MudSelectItem Value="@("default")">default</MudSelectItem>
            }
            else
            {
                @foreach (var profile in rosSettings.Profiles)
                {
                    <MudSelectItem Value="@profile.Name">@profile.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </div>
    <div class="Viewport" id="diag-topic">
        <h3>Topic</h3>
        <div class="InnerItem">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>topic</th>
                        <th>data type</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in topics)
                    {
                        <tr>
                            <td>@topic.Name</td>
                            <td>@topic.Type</td>
                            <td><button @onclick="()=>Subscribe(topic)" title="subscribe" class="mdi mdi-rss-box" />
                                <button @onclick="()=>ShowTopicDetails(topic)" title="details" class="mdi mdi-magnify" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div id="diag-subscription" class="Viewport">
        <h3>Subscription</h3>
        <div class="InnerItem">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Topic</th>
                        <th>Data</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in messages.TakeLast(10).Reverse())
                    {
                        <tr>
                            <td>@message.Item1</td>
                            <td>@message.Item2</td>
                            <td>@message.Item3</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
    <div class="Viewport" id="diag-node">
        <h3>Node</h3>
        <div class="InnerItem">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Nodes</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var node in nodes)
                    {
                        <tr>
                            <td>@node</td>
                            <td><button @onclick="()=>ShowNodeDetails(node)" title="subscribe" class="mdi mdi-magnify" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="Viewport" id="diag-details">
        <h3>Details</h3>
        <div class="InnerItem">
            @if (activeDetail == ActiveDetail.Node)
            {
                <NodeDetailView activeNode="@((string)activeDetailObject)" system="@system" topics="@topics" />
            }
            else if (activeDetail == ActiveDetail.Topic)
            {
                <TopicDetailView activeTopic="@((RosTopic)activeDetailObject)" system="@system"/>
            }
            else
            {
                <table class="datatable" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>No Details Selected</th>
                        </tr>
                    </thead>
                </table>
            }
        </div>
    </div>
    <div class="Viewport" id="diag-publish">
        <h3>Publish</h3>
        <div class="InnerItem">
            <div class="selectedMaster">
                <label for="messageInput">Message:</label>
                <input id="messageInput" @bind="inputMessage" @onkeydown="CheckForEnterKey" />
                <button @onclick="PublishMessage">Publish</button>
            </div>
        </div>
        @code {
            string inputMessage = "";

            private async void PublishMessage()
            {
                Console.WriteLine($"Publishing message {inputMessage}");
                var message = new std_msgs.String { data = inputMessage };

                try
                {
                    var str = Newtonsoft.Json.JsonConvert.SerializeObject((Message)message,new JsonSerializerSettings(){
                        ObjectCreationHandling = ObjectCreationHandling.Auto,
                        TypeNameHandling = TypeNameHandling.All
                    });
                    Console.WriteLine(str);
                    Console.WriteLine("Sending message to SignalR");
                    await hubConnection.SendAsync("Publish", "default", "/subscription_test", str );

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }

            private void CheckForEnterKey(KeyboardEventArgs e)
            {
                StateHasChanged(); // Force UI to aram(){"autabee.blazor"});
                if (e.Key == "Enter")
                {
                    PublishMessage();
                }
            }
        }
    </div>
    <div class="Viewport" id="diag-log">
        <h3>Log</h3>
        <div class="InnerItem">
        </div>
    </div>
</div>


@code {
    List<(DateTime, string, string)> messages = new List<(DateTime, string, string)>();
    List<RosTopic> topics = new List<RosTopic>();
    //List<RosService> services = new List<RosService>();
    RosSystem system;
    RosSettings rosSettings;
    string activeProfile = "default";
    IEnumerable<string> nodes = new string[0];
    private HubConnection? hubConnection;


    enum ActiveDetail
    {
        None,
        Topic,
        Subscription,
        Node,
        Services,
    }
    ActiveDetail activeDetail = ActiveDetail.None;
    object activeDetailObject = null;

    protected override async Task OnInitializedAsync()
    {

        // Setup SignalR
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/rosbridgehub"))
                .Build();

            await hubConnection.StartAsync();
            hubConnection.On<string, string, string>("SubscriptionUpdate", RecieveSubscriptionMessage);
            await hubConnection.SendAsync("Subscribe", "default", "/chatter");
            await hubConnection.SendAsync("ActiveSubscribe", "default", "/subscription_test", std_msgs.String.RosMessageName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
        try
        {

            var tmp = await Http.GetFromJsonAsync<RosSettings>("/api/Robots/getRosSettings/");
            
            if (tmp != null)
            {
                Logger.LogInformation(JsonConvert.SerializeObject(tmp.Profiles));
                rosSettings = tmp;
                activeProfile = rosSettings.Profiles.First().Name;
            }
            else
            {
                Logger.LogInformation("No settings found");
            }

            

            var result = await Http.GetFromJsonAsync<List<RosTopic>>("/api/RosMaster/getTopicTypes/rosapi");
            Logger.LogInformation(JsonConvert.SerializeObject(result));
            topics = result ?? new List<RosTopic>();

            Logger.LogInformation("Getting system");

            system = await Http.GetFromJsonAsync<RosSystem>("/api/RosMaster/getSystemState/rosapi");
            Logger.LogInformation(system.ToString());
            nodes = system.GetNodes();
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.Message);
        }

        // var id = rosConnector.Subscribe<std_msgs.String>("/subscription_test",
        // (std_msgs.String s) => SubscriptionHandler("/subscription_test", s));
    }

    private async void SubscriptionHandler(string topic, std_msgs.String message)
    {
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(message);
        messages.Add((DateTime.Now, topic, json));
        await InvokeAsync(StateHasChanged);
    }

    private void Subscribe(RosTopic topic)
    {
        hubConnection.On<string, string, string>("SubscriptionUpdate", RecieveSubscriptionMessage);
    }

    private void RecieveSubscriptionMessage(string topic, string message,string rosMsgType) 
    {
        Console.WriteLine($"Received message on {topic} with msg [{rosMsgType}] {message}");
        messages.Add((DateTime.Now, topic, message));
        StateHasChanged();
    }



    private void ShowNodeDetails(string node)
    {
        activeDetail = ActiveDetail.Node;
        activeDetailObject = node;

        Logger.LogInformation($"Showing topic details for {activeDetailObject} {activeDetail}");
        StateHasChanged();
    }

    private void ShowTopicDetails(RosTopic topic)
    {
        activeDetail = ActiveDetail.Topic;
        activeDetailObject = topic;

        Logger.LogInformation($"Showing topic details for {activeDetailObject} {activeDetail}");
        StateHasChanged();
    }
}