@page "/diagnostics"
@using System.Text
@using Autabee.Communication.RosClient
@using Autabee.Communication.RosClient.Dto
@using Autabee.RosScout.Components
@using Autabee.RosScout.Components.msg
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using RosSharp.RosBridgeClient
@using std_msgs = RosSharp.RosBridgeClient.MessageTypes.Std
@using System.Xml.Serialization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Diagnostics> Logger
@inject InMemoryLog log;
@inject RosScoutMemory memory;


<PageTitle>Ros Scout Diagnostics</PageTitle>
<div id="diagnostics-container">
    <div id="selected-master" style="padding-left:5px">
        <MudSelect @bind-Value="ActiveProfile" Margin="Margin.Dense" T="string" Label="SelectedProfile" Variant="Variant.Text">
            @if (rosSettings == null)
            {
                <MudSelectItem Value="@("default")">default</MudSelectItem>
            }
            else
            {
                @foreach (var profile in rosSettings.Profiles)
                {
                    <MudSelectItem Value="@profile.Name">@profile.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <button @onclick="ScanSystemData" title="rescan system" class="mdi mdi-reload" />
    </div>
    <div class="Viewport" id="diag-topic">
        @* <div class="Viewportheader"> *@
        <h3>Topic</h3>

        @* </div> *@

        <div class="InnerItem" style="width:100%">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>topic</th>
                        <th>data type</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in topics)
                    {
                        <tr>
                            <td>@topic.Name</td>
                            <td>@topic.Type</td>
                            <td>
                                <button @onclick="()=>Subscribe(topic)" title="subscribe" class="mdi mdi-rss-box" />
                                <button @onclick="()=>ShowTopicDetails(topic)" title="details" class="mdi mdi-magnify" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div id="diag-subscription" class="Viewport">
        <h3>Subscription</h3>
        <div class="InnerItem">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Profile</th>
                        <th>Time</th>
                        <th>Data</th>
                        <th>Type</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in values.TakeLast(10).Reverse())
                    {
                        <tr>
                            <td>@message.Key</td>
                            <td>@message.Value.Item2.Profile</td>
                            <td>@message.Value.Item1</td>
                            <td>@message.Value.Item2.Data</td>
                            <td>@message.Value.Item2.RosName</td>
                            <td><button @onclick="()=>UnSubscribe(message.Value.Item2.Profile, message.Key)" title="unSubscribe" class="mdi mdi-close" /></td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
    <div class="Viewport" id="diag-node">
        <h3>Node</h3>
        <div class="InnerItem">
            <table class="datatable" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Nodes</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var node in nodes)
                    {
                        <tr>
                            <td>@node</td>
                            <td><button @onclick="()=>ShowNodeDetails(node)" title="subscribe" class="mdi mdi-magnify" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="Viewport" id="diag-details">
        <h3>Details</h3>
        <div class="InnerItem">
            @if (activeDetail == ActiveDetail.Node)
            {
                <NodeDetailView activeNode="@activeNode" system="@system" topics="@topics" />
            }
            else if (activeDetail == ActiveDetail.Topic)
            {
                <TopicDetailView ActiveTopic="@activeTopic" System="@system" />
            }
            else
            {
                <table class="datatable" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>No Details Selected</th>
                        </tr>
                    </thead>
                </table>
            }
        </div>
    </div>
    <div class="Viewport" id="diag-publish">
        <h3>Publish</h3>
        @if (activeTopic.Name != string.Empty)
        {
            <div class="InnerItem">
                @if (activeTopic.Type == RosSharp.RosBridgeClient.MessageTypes.Geometry.Twist.RosMessageName)
                {
                    <TwistControlText Profile=@activeProfile RosTopic=@activeTopic OnPublish="PublishMessage" />
                }
                else
                {
                    <JsonSend rosTopic=@activeTopic Profile=@activeProfile OnPublish="PublishMessage" />
                }
            </div>
        }
        else
        {
            <div class="InnerItem">
                <h4>No topic selected</h4>
            </div>
        }
        @* <div class="InnerItem">
        <div class="selectedMaster">
        <label for="messageInput">Message:</label>
        <input id="messageInput" @bind="inputMessage" @onkeydown="CheckForEnterKey" />
        <button @onclick="PublishMessage">Publish</button>
        </div>
        </div>
        @code {
        string inputMessage = "";



        private void CheckForEnterKey(KeyboardEventArgs e)
        {
        StateHasChanged(); // Force UI to aram(){"autabee.blazor"});
        if (e.Key == "Enter")
        {
        PublishMessage();
        }
        }
        } *@
    </div>
    <div class="Viewport" id="diag-log">
        <h3>Log</h3>
        <div class="InnerItem">
            @foreach (var item in log.Messages.AsEnumerable().Reverse())
            {
                <LogItem item="@item" />
            }
        </div>
    </div>
</div>


@code {
    List<RosTopic> topics = new List<RosTopic>();
    //List<RosService> services = new List<RosService>();
    RosSystem system;
    RosSettings rosSettings;
    string ActiveProfile
    {
        get => activeProfile; set
        {
            SelectProfileChanged(value);
        }
    }
    string activeProfile = "none";
    IEnumerable<string> nodes = new string[0];
    private HubConnection? hubConnection;

    private Dictionary<string, (DateTime, SubscriptionValueRecord)> values = new();


    enum ActiveDetail
    {
        None,
        Topic,
        Subscription,
        Node,
        Services,
    }
    ActiveDetail activeDetail = ActiveDetail.None;
    string activeNode = "";
    RosTopic activeTopic = new RosTopic("", "");

    protected override async Task OnInitializedAsync()
    {

        // Setup SignalR
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/hub/rosbridge"))
                .Build();

            await hubConnection.StartAsync();
            // hubConnection.On<string, string, string>("SubscriptionUpdate", RecieveSubscriptionMessage);
            hubConnection.On<SubscriptionValueRecord>(nameof(IRosBridge.SubscriptionMsgUpdate), RecieveSubscriptionValueRecord);
            // await hubConnection.SendAsync("Subscribe", "default", "/chatter");
            // await hubConnection.SendAsync("ActiveSubscribe", "default", "/subscription_test", std_msgs.String.RosMessageName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
        try
        {
            rosSettings = new RosSettings();
            rosSettings.Profiles = (await memory.GetRosProfiles()).ToList();
            ActiveProfile = rosSettings.Profiles.FirstOrDefault()?.Name ?? "default";
            UpdateSystem();
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.Message);
        }

        memory.ProfileDataUpdate += Memory_ProfileUpdated;
        // await memory.Init();
    }
    public void Dispose()
    {
        memory.ProfileDataUpdate -= Memory_ProfileUpdated;
    }

    private async void Memory_ProfileUpdated(object? sender, RosProfile e)
    {

        if (ActiveProfile != null && ActiveProfile == e.Name)
        {
            ActiveProfile = e.Name;

        }
        UpdateSystem();

        await InvokeAsync(StateHasChanged);
    }

    private void UpdateSystem()
    {
        try
        {
            Logger.LogInformation($"Updating system data for {ActiveProfile}");
            system = memory.RosSystems[ActiveProfile];
            topics = memory.RosTopics[ActiveProfile].ToList();
            nodes = system.GetNodes();
        }
        catch(Exception ex)
        {
            Logger.LogInformation(ex.Message);
        }
        InvokeAsync(StateHasChanged);
    }

    private async void SelectProfileChanged(string profile)
    {
        if (profile == activeProfile)
        {
            return;
        }

        //TODO: Unsubscripted from old topics

        Logger.LogInformation($"Changing profile to {profile}");
        activeProfile = profile;

        UpdateSystem();
    }

    private void ScanSystemData() => memory.ScanSystemData(ActiveProfile);

    // private async void SubscriptionHandler(string topic, std_msgs.String message)
    // {
    //     var json = Newtonsoft.Json.JsonConvert.SerializeObject(message);
    //     messages.Add((DateTime.Now, topic, json));
    //     await InvokeAsync(StateHasChanged);
    // }




    private async void Subscribe(RosTopic topic)
    {
        Logger.LogInformation($"Subscribing to {topic.Name}, {hubConnection.State}");

        var value = await hubConnection.InvokeAsync<string>("Subscribe", activeProfile, topic.Name);

        Logger.LogInformation($"Subscribed to {topic.Name} with id {value}");
        if (!string.IsNullOrEmpty(value) && value.StartsWith("/"))
        {
            var emptyRecord = new SubscriptionValueRecord(value, topic.Name, activeProfile, topic.Type, string.Empty);
            values.Add(value, new(DateTime.MinValue, emptyRecord));
            StateHasChanged();
        }

    }


    private async void UnSubscribe(string profile, string subscriptionId)
    {
        await hubConnection.InvokeAsync("UnSubscribe", profile, subscriptionId);
        values.Remove(subscriptionId);

        StateHasChanged();
    }

    // private void RecieveSubscriptionMessage(string topic, string message, string rosMsgType)
    // {

    // }

    private void RecieveSubscriptionValueRecord(SubscriptionValueRecord record)
    {
        // Logger.LogInformation("update from {}, from topic {}[{}]:{}, {}", record.Profile, record.Topic, record.RosName, record.Data, values.ContainsKey(record.Id));
        if (values.ContainsKey(record.Id))
        {
            values[record.Id] = (DateTime.Now, record);
            StateHasChanged();
        }

        else
        {

        }

    }


    private void ShowNodeDetails(string node)
    {
        activeDetail = ActiveDetail.Node;
        activeNode = node;

        Logger.LogInformation($"Showing topic details for {activeNode} {activeDetail}");
        StateHasChanged();
        ScanSystemData();
    }

    private void ShowTopicDetails(RosTopic topic)
    {

        activeDetail = ActiveDetail.Topic;
        activeTopic = topic;

        Logger.LogInformation($"Showing topic details for {activeTopic} {activeDetail}");
        StateHasChanged();
        ScanSystemData();
    }


    private async void PublishMessage(RosProfileJsonMessagePublish publish)
    {
        try
        {
            //Logger.LogInformation("Publishing message to {}:{}:{} ", publish.profile, publish.topic.Name, publish.json);
            await hubConnection.SendAsync("ProfilePublish", publish);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}