@using Autabee.Communication.RosClient.Dto


<table class="datatable" style="width: 100%;">
    <thead>
        <tr>
            <th>Description</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Details of:</td><td>Topic</td></tr>
        <tr><td>Name:</td><td>@ActiveTopic.Name</td></tr>
        <tr><td>Message Type:</td><td>@ActiveTopic.Type</td></tr>
    </tbody>

    @if (System.subscribers.Any(o => o.Name == ActiveTopic.Name))
    {
        <thead>
            <tr>
                <th colspan="2">Subscribers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var topic in System.subscribers.First(o => o.Name == ActiveTopic.Name).nodes)
            {
                <tr>
                    <td colspan="2">@topic</td>
                </tr>
            }
        </tbody>
    }
    else
    {
        <thead>
            <tr>
                <th colspan="2">No Subscribers</th>
            </tr>
        </thead>
    }

    @if (System.publishers.Any(o => o.Name == ActiveTopic.Name))
    {
        <thead>
            <tr>
                <th colspan="2">Publishers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var topic in System.publishers.First(o => o.Name == ActiveTopic.Name).nodes)
            {
                <tr>
                    <td colspan="2">@topic</td>
                </tr>
            }
        </tbody>

    }
    else
    {
        <thead>
            <tr>
                <th colspan="2">No Publishers</th>
            </tr>
        </thead>
    }
</table>

@code {
    [Parameter]
    public RosTopic ActiveTopic { get; set; } = new RosTopic("","");

    [Parameter]
    public RosSystem System { get; set; } = new RosSystem(new RosConnection[0], new RosConnection[0],new RosConnection[0]);

    protected override Task OnInitializedAsync()
    {
        if (ActiveTopic == null)
        {
            throw new ArgumentNullException(nameof(ActiveTopic));
        }

        if (System == null)
        {
            throw new ArgumentNullException(nameof(System));
        }

        return base.OnInitializedAsync();
    }
}
